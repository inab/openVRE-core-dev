#!/bin/bash
# Generated by MuG VRE
cd shared_data/userdata/D4AANON6781384a374b0/__PROJ6781384a374b44.26373153/run001

# Running vtk_viewer tool ...

echo '# Start time:' $(date) > shared_data/userdata/D4AANON6781384a374b0/__PROJ6781384a374b44.26373153/run001/.tool.log


# Export service to an available port (-p $FREE_PORT:8787). NOT REQUIRED when using proxy-gt
FREE_PORT=9001



#Docker permissions
current_user=$(whoami)
current_groups=$(groups)
docker_socket_permissions=$(ls -l /var/run/docker.sock)

echo "Current user: $current_user"
echo "Groups: $current_groups"
echo "Docker socket permissions: $docker_socket_permissions"

if echo "$current_groups" | grep -q "docker"; then
    echo "User $current_user is already in the 'docker' group."
else
    echo "User $current_user is not in the 'docker' group. Attempting to add..."

    sudo usermod -aG docker "$current_user"

    if [ $? -eq 0 ]; then
        echo "User $current_user has been added to the 'docker' group."
        echo "Please log out and log back in for the group changes to take effect."
    else
        echo "Failed to add user $current_user to the 'docker' group."
    fi
fi


# Create or retrieve the network ID for the openVRE_net network. Required when using proxy-gt
#NET_NAME="openvre_net";
NET_NAME=net_vre;
NET_ID=$(docker network inspect $NET_NAME --format "{{.Id}}" 2>/dev/null || docker network create --driver bridge "$NET_NAME");

# Run the Docker container with necessary options and configurations
CONTAINER_ID=$(docker run \
    --rm \
    --privileged \
    -v /var/run/docker.sock:/var/run/docker.sock -d \
    --net=$NET_NAME --name paraview_image2_6d7464e57835ea58 \
     \
    -v shared_data/public/:shared_data/public_tmp/ \
    -v shared_data/userdata/D4AANON6781384a374b0:shared_data/userdata_tmp/D4AANON6781384a374b0 \
    -p $FREE_PORT:8787 paraview_image2 bin/pvpython -m paraview.apps.visualizer); 

# Check if the container is running
if ! docker top $CONTAINER_ID &>/dev/null; then
    printf '%s | %s
' "$(date)" "Container crashed unexpectedly...";
    exit 1;
fi

if ! docker inspect --format='{{.State.Running}}' $CONTAINER_ID | grep -q true; then
    printf '%s | %s
' "$(date)" "Container not running anymore";
    exit 1;
fi

# Report container info to VRE
CONTAINER_NAME=$(docker inspect --format {{.Name}} $CONTAINER_ID | cut -d "/" -f 2);
CONTAINER_URL=$(docker inspect --format "{{ .NetworkSettings.Networks.$NET_NAME.IPAddress }}:8787" $CONTAINER_ID);
printf '%s | %s
' "$(date)" "ContainerID: $CONTAINER_ID";
printf '%s | %s
' "$(date)" "ContainerName: $CONTAINER_NAME";
printf '%s | %s
' "$(date)" "ContainerURL: $CONTAINER_URL";
printf '%s | %s
' "$(date)" "ExposedPort: $FREE_PORT";

docker logs -f $CONTAINER_ID &> /home/ubuntu/dockerized_vre/volumesshared_data/userdata/D4AANON6781384a374b0/__PROJ6781384a374b44.26373153/run001/.tool.log &

printf '%s | %s
' "$(date)" "Waiting for the service URL to become available in the internal network...";
#if timeout 420 wget --retry-connrefused -q --tries=300 --waitretry=10 --spider $CONTAINER_URL; then
if timeout 420 wget --retry-connrefused --tries=300 --waitretry=10 -O /dev/null $CONTAINER_URL; then
    printf '%s | %s
' "$(date)" "Service UP";
else
    printf '%s | %s
' "$(date)" "Service TIMEOUT (7 minutes)";
fi

# Wait forever
printf '%s | %s
' "$(date)" "Wait while container is running...";
exit_code="$(docker wait $CONTAINER_ID)";
printf '%s | Container has stopped (exit code = %s) 
' "$(date)" "$exit_code";

echo '# End time:' $(date) >> /home/ubuntu/dockerized_vre/volumesshared_data/userdata/D4AANON6781384a374b0/__PROJ6781384a374b44.26373153/run001/.tool.log;

exit 0; >> shared_data/userdata/D4AANON6781384a374b0/__PROJ6781384a374b44.26373153/run001/.tool.log 2>&1

echo '# End time:' $(date) >> shared_data/userdata/D4AANON6781384a374b0/__PROJ6781384a374b44.26373153/run001/.tool.log
